#!/usr/bin/env python
# encoding: utf-8

"""
An application for making podcasts from automatically-created recordings.
"""

from __future__ import with_statement

import os
import sys
import time
import yaml
import random
import subprocess

settings = {
    'session_path': '/var/producer',
    'recording_base': None,
    'save_path': None,
    'on_complete': None,
    'on_finish_unmarked': None
}

def get_session_path(session_id):
    return os.path.join(settings['session_path'], '%s.yaml' % session_id)

def generate_id(length=8):
    chars = ([chr(ord('a') + i) for i in xrange(26)] +
        [chr(ord('0') + i) for i in xrange(10)])
    
    return ''.join(random.choice(chars) for i in xrange(length))

def read_session(session_id):
    with open(get_session_path(session_id), 'rt') as f:
        return yaml.load(f)

def save_session(session_id, info):
    with open(get_session_path(session_id), 'wt') as f:
        yaml.dump(info, f)

def create_session(start_time):
    session_id = generate_id()
    save_session(session_id, dict(recording_start=start_time))
    return session_id

def update_session(session_id, **values):
    info = read_session(session_id)
    info.update(values)
    save_session(session_id, info)

def clean_session(session_id):
    os.remove(get_session_path(session_id))

def mark_content_start(session_id, start_time):
    update_session(session_id, content_start=start_time)

def mark_content_end(session_id, end_time):
    update_session(session_id, content_end=end_time)

def finish_session(session_id, end_time, recording_file):
    info = read_session(session_id)
    
    if 'content_end' not in info:
        # ruh-roh.
        hook = settings.get('on_finish_unmarked')
        if hook:
            subprocess.call([hook, session_id, recording_file])
        clean_session(session_id)
        return None
    
    start = info['content_start'] - info['recording_start']
    length = info['content_end'] - info['content_start']
    
    dest_folder = ''
    if settings['recording_base']:
        base = settings['recording_base']
        if os.path.commonprefix([base, recording_file]) == base:
            dest_folder = recording_file[len(base):]
    
    filename = os.path.basename(recording_file)
    
    output_path = os.path.join(settings['save_path'], dest_folder, filename)
    trim_audio(recording_file, output_path, start, length)
    
    base, extension = os.path.splitext(output_path)
    mp3_path = '%s.mp3' % base
    compress_audio(output_path, mp3_path)
    
    hook = settings.get('on_complete')
    if hook:
        subprocess.call([hook, session_id, output_path, mp3_path])
    clean_session(session_id)
    
    return (output_path, mp3_path)

def trim_audio(recording, output_file, start, length):
    sox = ['sox', recording, output_file]
    trim = ['trim', '%f' % start, '%f' % length]
    pad = ['pad', '0', '2']
    fade = ['fade', '0.4', '%f' % (length + 2), '3']
    
    command = sox + trim + pad + fade
    subprocess.check_call(command)

def compress_audio(input_file, output_file):
    subprocess.check_call(['sox', input_file, output_file])

def print_usage():
    print >>sys.stderr, 'usage: %s command [command args...]' % sys.argv[0]

if __name__ == '__main__':
    now = time.time()
    
    config_file = '/etc/producer.yaml'
    if len(sys.argv) > 2 and sys.argv[1] == '-c':
        config_file = sys.argv[2]
        args = sys.argv[3:]
    else:
        args = sys.argv[1:]
    
    try:
        with open(config_file, 'rt') as f:
            settings.update(yaml.load(f))
    except IOError, e:
        if e.errno == 2:
            print >>sys.stderr, "configuration file %s does not exist" % \
                config_file
        else:
            print >>sys.stderr, "failed to open config file %s: %s" % \
                (config_file, e.args[1])
        sys.exit(1)
    
    try:
        command = args[0]
    except IndexError:
        print_usage()
        sys.exit(1)
    
    if command == 'create':
        print create_session(now)
    elif command in ('start', 'started'):
        session_id = args[1]
        mark_content_start(session_id, now)
    elif command in ('stop', 'stopped'):
        session_id = args[1]
        mark_content_end(session_id, now)
    elif command == 'finish':
        session_id, filename = args[1:3]
        result = finish_session(session_id, now, filename)
        if not result:
            print >>sys.stderr, "cannot edit: insufficiently marked"
            sys.exit(1)
        print "\n".join(result)
    else:
        print >>sys.stderr, "unknown command:", command
        sys.exit(1)
